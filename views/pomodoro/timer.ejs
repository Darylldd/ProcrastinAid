<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <meta name="description" content="Use the Pomodoro Timer in ProcrastinAid - Boost productivity with meme-powered focus"/>
  <meta name="keywords" content="ProcrastinAid, pomodoro timer, task management, student productivity"/>
  <title>Pomodoro Timer - ProcrastinAid</title>
  
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Lexend:wght@400;500;700&display=stylesheet"/>
  
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

  <style>
    :root {
      --primary: #5E56FF;
      --primary-light: #7D76FF;
      --background: #F8F9FF;
      --card-bg: #FFFFFF;
      --text: #1A1A1A;
      --text-light: #6B7280;
      --glass-bg: rgba(255, 255, 255, 0.15);
      --blur: 12px;
      --transition-speed: 0.3s;
      --border-radius: 16px;
      --shadow-sm: 0 1px 3px rgba(0,0,0,0.08);
      --shadow-md: 0 4px 12px rgba(0,0,0,0.08);
      --error: #EF4444;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      scroll-behavior: smooth;
    }

    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--background);
      color: var(--text);
      line-height: 1.6;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    /* Header Styles */
    header {
      position: fixed;
      width: 100%;
      top: 0;
      z-index: 1000;
      background: rgba(255, 255, 255, 0.98);
      backdrop-filter: blur(var(--blur));
      -webkit-backdrop-filter: blur(var(--blur));
      padding: 1.2rem 8%;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: all 0.3s ease;
      border-bottom: 1px solid rgba(0,0,0,0.05);
    }

    header.scrolled {
      box-shadow: var(--shadow-sm);
      padding: 1rem 8%;
    }

    .logo-container {
      display: flex;
      align-items: center;
      gap: 0.8rem;
    }

    .logo {
      width: 48px;
      height: 48px;
      object-fit: contain;
    }

    .logo-text {
      font-family: 'Lexend', sans-serif;
      font-weight: 700;
      font-size: 1.3rem;
      background: linear-gradient(90deg, var(--primary), var(--primary-light));
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
    }

    nav {
      display: flex;
      align-items: center;
    }

    .nav-links {
      display: flex;
      gap: 2rem;
      align-items: center;
    }

    nav a {
      text-decoration: none;
      color: var(--text);
      font-weight: 'Inter', sans-serif;
      font-size: 0.95rem;
      position: relative;
      transition: all var(--transition-speed) ease;
      padding: 0.5rem 0;
    }

    nav a::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 2px;
      background: linear-gradient(90deg, var(--primary), var(--primary-light));
      left: 0;
      bottom: 0;
      transform: scaleX(0);
      transform-origin: right;
      transition: transform var(--transition-speed) ease;
    }

    nav a:hover::after {
      transform: scaleX(1);
      transform-origin: left;
    }

    .hamburger {
      display: none;
      font-size: 1.5rem;
      background: none;
      border: none;
      color: var(--text);
      cursor: pointer;
      padding: 0.5rem;
    }

    /* Main Content */
    main {
      max-width: 600px;
      margin: 8rem auto 4rem;
      padding: 0 8%;
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      position: relative; /* For positioning meme bubble */
    }

    h1 {
    font-family: 'Lexend', sans-serif;
    font-weight: 700;
    font-size: 2.2rem;
    text-align: center;
    margin-bottom: 1.5rem;
    background: linear-gradient(90deg, var(--primary), var(--primary-light));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    }

    .timer-container {
      background: var(--card-bg);
      border-radius: var(--border-radius);
      padding: 2.5rem;
      box-shadow: var(--shadow-md);
      width: 100%;
      position: relative;
      border: 1px solid rgba(0,0,0,0.05);
      text-align: center;
    }

    .timer-container::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle at center, rgba(94,86,255,0.08) 0%, transparent 70%);
      pointer-events: none;
      z-index: -1;
    }

    .task-info {
      font-size: 0.95rem;
      color: var(--text-light);
      margin-bottom: 1.5rem;
    }

    .timer-controls {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      align-items: center;
    }

    .form-group {
      display: flex;
      align-items: column;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    label {
      font-weight: 500;
      font-size: 0.9rem;
      color: var(--text-light);
    }

    input[type="number"] {
      width: 100px;
      padding: 0.8rem 1.2rem;
      border: 1px solid rgba(0,0,0,0.1);
      border-radius: 8px;
      font-size: 0.95rem;
      font-family: 'Inter', sans-serif;
      transition: all var(--transition-speed) ease;
      outline: none;
    }

    input[type="number"]:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(94,86,255,0.1);
    }

    #timerDisplay {
      font-family: 'Lexend', sans-serif;
      font-weight: 700;
      font-size: 3rem;
      color: var(--primary);
      margin: 1.5rem 0;
      background: linear-gradient(90deg, var(--primary), var(--primary-light));
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
    }

    .button-group {
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-wrap: wrap;
    }

    .cta-button {
      background: linear-gradient(90deg, var(--primary), var(--primary-light));
      color: white;
      border: none;
      padding: 0.8rem 1.8rem;
      border-radius: 100px;
      font-weight: 600;
      font-size: 0.95rem;
      cursor: pointer;
      transition: all var(--transition-speed) ease;
      box-shadow: var(--shadow-sm);
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      text-decoration: none;
    }

    .cta-button:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }

    .cta-button:disabled {
      background: var(--text-light);
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .back-link {
      text-align: center;
      margin-top: 1.5rem;
      font-size: 0.9rem;
      color: var(--text-light);
    }

    .back-link a {
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
      transition: all var(--transition-speed) ease;
    }

    .back-link a:hover {
      color: var(--primary-light);
      text-decoration: underline;
    }

    .meme-bubble {
      position: absolute;
      background: white;
      color: var(--text);
      padding: 0.8rem 1.2rem;
      border-radius: 20px;
      font-weight: 600;
      box-shadow: var(--shadow-md);
      font-size: 0.85rem;
      animation: float 5s ease-in-out infinite;
      opacity: 0;
      transform: translateY(15px);
      transition: all 0.5s ease;
      bottom: 80px; /* Above timer */
      left: 8%; /* Aligned with main padding */
      z-index: 10; /* Above content but below header */
      animation-delay: 0.5s;
    }

    .meme-bubble.show {
      opacity: 1;
      transform: translateY(0);
    }

    @keyframes float {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-10px); }
    }

    /* Responsive Styles */
    @media (max-width: 768px) {
      header {
        padding: 1rem 5%;
      }

      .nav-links {
        display: none;
        flex-direction: column;
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background: rgba(255, 255, 255, 0.98);
        backdrop-filter: blur(var(--blur));
        -webkit-backdrop-filter: blur(var(--blur));
        padding: 1rem 5%;
        box-shadow: var(--shadow-sm);
        border-top: 1px solid rgba(0,0,0,0.05);
      }

      .nav-links.active {
        display: flex;
      }

      .nav-links a {
        padding: 0.8rem 0;
        font-size: 1rem;
      }

      .hamburger {
        display: block;
      }

      main {
        margin: 6rem auto 3rem;
        padding: 0 5%;
      }

      .meme-bubble {
        display: none;
      }
    }

    @media (max-width: 480px) {
      h1 {
        font-size: 1.8rem;
      }

      .timer-container {
        padding: 2rem;
      }

      #timerDisplay {
        font-size: 2.5rem;
      }

      .form-group {
        flex-direction: column;
        align-items: center;
      }
    }
  </style>
</head>
<body>
  <header>
    <div class="logo-container">
      <img src="/images/logogg.png" alt="ProcrastinAid Logo" class="logo"/>
      <span class="logo-text">ProcrastinAid</span>
    </div>
    <nav>
      <button class="hamburger" aria-label="Toggle menu">
        <i class="fas fa-bars"></i>
      </button>
      <div class="nav-links">
        <a href="/dashboard">Dashboard</a>
        <a href="/tasks">Tasks</a>
        <a href="/pomodoro">Pomodoro Timer</a>
        <a href="/ai/insights">AI Insights</a>
        <a href="/">Logout</a>
      </div>
    </nav>
  </header>

  <main>
    <div class="timer-container">
      <h1>Pomodoro Timer</h1>
      <div class="meme-bubble">"Focus mode: ON!"</div>
      <p class="task-info">Task ID: <%= taskId %></p>
      <div class="timer-controls">
        <div class="form-group">
          <label for="duration">Duration (minutes)</label>
          <input type="number" id="duration" value="<%= duration || 25 %>" min="1" max="120" />
        </div>
        <div id="timerDisplay">25:00</div>
        <div class="button-group">
          <button id="startBtn" class="cta-button"><i class="fas fa-play"></i> Start</button>
          <button id="pauseBtn" class="cta-button" disabled><i class="fas fa-pause"></i> Pause</button>
          <button id="resetBtn" class="cta-button" disabled><i class="fas fa-undo"></i> Reset</button>
        </div>
      </div>
      <p class="back-link"><a href="/tasks">Back to Tasks</a></p>
    </div>
    <audio id="ding" src="/sounds/alarm.mp3" preload="auto"></audio>
  </main>

  <script>
    const taskId = <%- JSON.stringify(taskId || 0) %>;
    const activeSessionId = <%- JSON.stringify(activeSessionId || 0) %>;
    let durationInput = document.getElementById('duration');
    let timerDisplay = document.getElementById('timerDisplay');
    let startBtn = document.getElementById('startBtn');
    let pauseBtn = document.getElementById('pauseBtn');
    let resetBtn = document.getElementById('resetBtn');
    let dingSound = document.getElementById('ding');

    let timer = null;
    let totalSeconds = 0;
    let remainingSeconds = 0;
    let isPaused = false;

    function updateDisplay(seconds) {
      const min = String(Math.floor(seconds / 60)).padStart(2, '0');
      const sec = String(seconds % 60).padStart(2, '0');
      timerDisplay.textContent = `${min}:${sec}`;
    }

    function startCountdown() {
      timer = setInterval(() => {
        if (remainingSeconds > 0) {
          remainingSeconds--;
          updateDisplay(remainingSeconds);
        } else {
          clearInterval(timer);
          dingSound.play();
          alert("Pomodoro complete!");
          stopPomodoro();
        }
      }, 1000);
    }

    function stopPomodoro() {
      fetch('/pomodoro/stop/<%= activeSessionId || 0 %>', {
        method: 'POST'
      });
    }

    startBtn.onclick = async () => {
      const taskId = "<%= taskId %>";
      const duration = durationInput.value;

      totalSeconds = remainingSeconds = duration * 60;
      updateDisplay(remainingSeconds);
      startCountdown();
      startBtn.disabled = true;
      pauseBtn.disabled = false;
      resetBtn.disabled = false;

      const res = await fetch('/pomodoro/start', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ taskId, duration })
      });

      const data = await res.json();
      console.log('Response:', data);
      if (!res.ok) alert("Failed to record session.");
    };

    pauseBtn.onclick = () => {
      if (isPaused) {
        startCountdown();
        pauseBtn.innerHTML = '<i class="fas fa-pause"></i> Pause';
      } else {
        clearInterval(timer);
        pauseBtn.innerHTML = '<i class="fas fa-play"></i> Resume';
      }
      isPaused = !isPaused;
    };

    resetBtn.onclick = () => {
      clearInterval(timer);
      updateDisplay(totalSeconds);
      remainingSeconds = totalSeconds;
      pauseBtn.innerHTML = '<i class="fas fa-pause"></i> Pause';
      isPaused = false;
    };

    // Header scroll effect
    window.addEventListener('scroll', () => {
      const header = document.querySelector('header');
      header.classList.toggle('scrolled', window.scrollY > 50);
    });

    // Hamburger menu toggle
    document.addEventListener('DOMContentLoaded', () => {
      const hamburger = document.querySelector('.hamburger');
      const navLinks = document.querySelector('.nav-links');

      hamburger.addEventListener('click', () => {
        navLinks.classList.toggle('active');
        hamburger.querySelector('i').classList.toggle('fa-bars');
        hamburger.querySelector('i').classList.toggle('fa-times');
      });

      // Close menu when clicking a link
      navLinks.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', () => {
          navLinks.classList.remove('active');
          hamburger.querySelector('i').classList.add('fa-bars');
          hamburger.querySelector('i').classList.remove('fa-times');
        });
      });

      // Animate meme bubble and timer container
      const bubble = document.querySelector('.meme-bubble');
      setTimeout(() => {
        bubble.classList.add('show');
      }, 500);

      const timerContainer = document.querySelector('.timer-container');
      timerContainer.style.opacity = '0';
      timerContainer.style.transform = 'translateY(30px)';
      setTimeout(() => {
        timerContainer.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
        timerContainer.style.opacity = '1';
        timerContainer.style.transform = 'translateY(0)';
      }, 200);
    });
  </script>
</body>
</html>